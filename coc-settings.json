{
    "languageserver": {
        "vlang": {
            "command": "vls",
            "filetypes": ["v", "vlang"]
        },
        "c": {
            "command": "ccls",
            "filetypes": ["c", "cpp", "objc", "objcpp"]
        },
        "opencl": {
            "command": "clangd",
            "filetypes": ["opencl", "cl", "open-cl"]
        },
        "julia": {
            "command": "julia",
            "args": ["--startup-file=no", "--history-file=no", "-e",
                "using LanguageServer;\nusing Pkg;\nimport StaticLint;\nimport SymbolServer;\nenv_path = dirname(Pkg.Types.Context().env.project_file);\ndebug = false;\nserver = LanguageServer.LanguageServerInstance(stdin, stdout, debug, env_path, \"\", Dict());\nserver.runlinter = true;\nrun(server);"
            ],
            "filetypes": ["julia"]
        },
        "bash": {
            "command": "bash-language-server",
            "args": ["start"],
            "filetypes": ["sh"],
            "ignoredRootPaths": ["~"]
        },
        "latex": {
            "command": "texlab",
            "ignoredRootPaths": ["~"],
            "filetypes": ["tex", "bib", "plaintex", "context"]
        },
        "dockerfile": {
            "command": "docker-langserver",
            "filetypes": ["dockerfile"],
            "args": ["--stdio"]
        },
        "haskell": {
            "command": "hie-wrapper",
            "args": ["--lsp"],
            "rootPatterns": [
                "stack.yaml",
                "cabal.config",
                "package.yaml"
            ],
            "filetypes": [
                "hs",
                "lhs",
                "haskell"
            ],
            "initializationOptions": {
                "languageServerHaskell": {
                    "hlintOn": true
                }
            }
        },
        "elm": {
            "command": "elm-language-server",
            "filetypes": ["elm"],
            "rootPatterns": ["elm.json"],
            "initializationOptions": {
                "elmAnalyseTrigger": "change"
            }
        },
        "crystal": {
            "command": "scry",
            "filetypes": ["crystal"]
        }

    }
}
